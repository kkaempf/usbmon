#!/usr/bin/env ruby
#
# digidia
#
# Interprete USBMON file as DigitDia scanner
#
# Usage:
#   digitdia                      # Reads from stdin
#   digitdia <usbmon-file1> ...   # Reads from file(s)
#

$:.push(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'usbmon'

class DigitDia
  def initialize debug_level = 0, path=nil
    if path
      raise "Empty path" if path.empty?
      @path = path
      @file = File.open(path, 'r')
      raise "Can't open #{path}" unless path
    else
      @file = STDIN
      STDERR.puts "Reading from stdin"
    end
    @digitdia = UsbMon::DigitDia.new debug_level
  end
  
  def interprete to=STDOUT
    events = UsbMon::Event.parse @file
    @digitdia.run events
  end
end

debug_level = 0
files = []
loop do
  arg = ARGV.shift
  if arg.nil?
    break
  elsif arg == "-d"
    begin
      debug_level = ARGV.shift.to_i
    rescue
      raise "No integer value following -d"
    end
    puts "Debug level #{debug_level}"
    next
  elsif File.readable? arg
    files << arg
  else
    STDERR.puts "Warning: Argument '#{arg}' is not a file, ignoring"
  end
end

if debug_level <= 0
  STDERR.puts "*** debug_level too low"
end

if files.size == 0
  digitdia = DigitDia.new debug_level
  digitdia.interprete
else
  files.each do |path|
    digitdia = DigitDia.new debug_level, path
    puts "-------- #{path} ----------"
    digitdia.interprete
  end
end
